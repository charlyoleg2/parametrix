---
title: Geom's tutorial
category: documentation
---

<script lang="ts">
	import { base } from '$app/paths';
</script>


# {title}

## Design examples

Below three repositories showcasing the usage of the library [geometrix](https://www.npmjs.com/package/geometrix) and its associated framework [parametrix](https://github.com/charlyoleg2/parametrix):

1. [parame51](https://github.com/charlyoleg2/parame51) and the associated UI [desi51-ui](https://charlyoleg2.github.io/parame51/)
2. [parame52](https://github.com/charlyoleg2/parame52) and the associated UI [desi52-ui](https://charlyoleg2.github.io/parame52/)
3. [parame53](https://github.com/charlyoleg2/parame53) and the associated UI [desi53-ui](https://charlyoleg2.github.io/parame53/)

## Tutorial of the Geometrix concepts

### Simple design

- [myPartA source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartA.ts)
- [myPartA page](https://charlyoleg2.github.io/parame51/myGroup1/myPartA)

*myPartA* goes through the required [steps](https://charlyoleg2.github.io/parametrix/docs/geom_user#main_steps) of a 3D part description.

Programmatically, defining a 3D-part-design consists of creating a [const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) object of type *tPageDef*.

API:

- [tPageDef](https://charlyoleg2.github.io/parametrix/docs/apidoc/interfaces/geometrix.tPageDef.html)


### Parameter types

- [myPartB source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartB.ts)
- [myPartB page](https://charlyoleg2.github.io/parame51/myGroup1/myPartB)

*myPartB* illustrates the usage of the 3 types of parameters:

- *numerical* parameter
- *dropdown* parameter
- *checkbox* parameter

API:

- [pNumber()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.pNumber.html)
- [pDropdown()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.pDropdown.html)
- [pCheckbox()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.pCheckbox.html)


### Extrusion and 3D construction

- [myPartC source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartC.ts)
- [myPartC page](https://charlyoleg2.github.io/parame51/myGroup1/myPartC)

*myPartC* illustrates the usage of the 2 types of extrusion:

- *linear-orthogonal* extrusion along the axis Oz
- *rotation-revolution* extrusion along the axis Oy

And the usage of the 4 types of boolean operations:

- *identity* : just an alias to the first element of the list
- *union* : merge/fuse the list of parts in one part
- *substraction* : remove from the first element of the list the overlaping portion of the rest of the list
- *intersection* : common portion of all elements of the list

API:

- [EExtrude](https://charlyoleg2.github.io/parametrix/docs/apidoc/enums/geometrix.EExtrude.html)
- [EBVolume](https://charlyoleg2.github.io/parametrix/docs/apidoc/enums/geometrix.EBVolume.html)


### Evidences of the power of 2D technical drawings

- [myPartD source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartD.ts)
- [myPartD page](https://charlyoleg2.github.io/parame51/myGroup1/myPartD)

*myPartD* has simple 2D figures but a complex 3D shape. 2D technical drawing provides a simple representation of complex shape.


### Contour creation with absolute/relative cartesian/polar coordinates

- [myPartE source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartE.ts)
- [myPartE page](https://charlyoleg2.github.io/parame51/myGroup2/myPartE)

*myPartE* illustrates how to create contours using the four types of coordinates:

- cartesian absolute : X,Y relative to the figure origin
- cartesian relative : x,y relative to the previous point of the contour
- polar absolute : angle, length relative to the figure origin
- polar relative : angle relative to the horizontal, length relative to the previous point

The first point of a *contour* is always in *cartesian absolute*.

API:

- [.addSegStrokeA()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeA)
- [.addSegStrokeR()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeR)
- [.addSegStrokeAP()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeAP)
- [.addSegStrokeRP()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeRP)


### Contour corner options

- [myPartF source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartF.ts)
- [myPartF page](https://charlyoleg2.github.io/parame51/myGroup2/myPartF)

*myPartF* illustrates how to apply the four possible corner types:

- pointed (i.e. no corner)
- rounded
- widened
- wideAcc

The corner of the first point of a *contour* can be set at the begining of the contour chain or at the end of the contour chain.

In the UI, click on the checkboc *main skeleton* and *points* to activate the corresponding drawing layers. It helps to understand the *contours*.

API:

- [.addCornerPointed()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addCornerPointed)
- [.addCornerRounded()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addCornerRounded)
- [.addCornerWidened()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addCornerWidened)
- [.addCornerWideAcc()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addCornerWideAcc)


### Contour transformations

- [myPartG source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartG.ts)
- [myPartG page](https://charlyoleg2.github.io/parame51/myGroup2/myPartG)

*myPartG* illustrates how to apply the four following transformations on *contours*:

- rotate contour
- scale contour
- translate contour with parameters x,y
- translate contour with parameters angle,length

API:

- [.rotate()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#rotate)
- [.scale()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#scale)
- [.translate()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#translate)
- [.translatePolar()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#translatePolar)


### Partial contour

- [myPartH source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartH.ts)
- [myPartH page](https://charlyoleg2.github.io/parame51/myGroup2/myPartH)

*myPartH* illustrates how to create a *partial contour* (i.e. a not closed contour) and re-use it several times to create complete contour (i.e. a closed contour).

The method *.addPartial()* automatic translate the new piece of contour, so the first point of the partial contour fits with the last point of the contour.

API:

- [.addPartial()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Contour.html#addPartial)


### Figure transformations

- [myPartI source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartI.ts)
- [myPartI page](https://charlyoleg2.github.io/parame51/myGroup2/myPartI)

*myPartI* illustrates how to apply to all layers of a figures the following transformations:

- rotate figure
- translate figure with parameters x,y
- translate figure with parameters angle,length

*myPartI* illustrates also how to merge figures together.

This design is using the *time parameter t*. Play with the time control to see the effect of this *t* parameter.

API:

- [.rotate()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Figure.html#rotate)
- [.translate()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Figure.html#translate)
- [.translatePolar()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Figure.html#translatePolar)
- [.mergeFigure()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Figure.html#mergeFigure)


### Re-using figures of other designs

- [myPartJ source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartJ.ts)
- [myPartJ page](https://charlyoleg2.github.io/parame51/myGroup2/myPartJ)

*myPartJ* illustrates how to re-use figures defined in other designs. *myPartJ* imports the designs *myPartF*, *myPartG* and *myPartI* to use their figures.

API:

- [designParam()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.designParam-1.html)
- [.setVal()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.DesignParam.html#setVal)
- [.getParamVal()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.DesignParam.html#getParamVal)
- [checkGeom()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.checkGeom.html)
- [prefixLog()](https://charlyoleg2.github.io/parametrix/docs/apidoc/functions/geometrix.prefixLog.html)
- [.mergeFigure()](https://charlyoleg2.github.io/parametrix/docs/apidoc/classes/geometrix.Figure.html#mergeFigure)


### Assembly of 3D-parts

- [myPartK source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartK.ts)
- [myPartK page](https://charlyoleg2.github.io/parame51/myGroup2/myPartK)

*myPartK* assembles 3D-parts defined in other designs. *myPartK* imports the designs *myPartA* and *myPartD* to use their *volume definitions*.


### Expose external design

[parame52-ui]() might expose designs externally defined (not coming from *parame52*). In this case, you must manually copy the svg-files in the *static* directoty of the *sveltekit* project *parame52-ui*.

### Common design list definition

When you develop your own 3D part library (like [parame51]()) you typically create 3 node-packages:

- parameXYZ : your 3D part library
- parameXYZ-ui : the sveltekit project to visualize your work in a Web-UI
- parameXYZ-cli : a CLI to export your work from command-line

In *parameXYZ-ui* and *parameXYZ-cli* you define the list of designs you want to expose. Usually it corresponds to the list your 3D part libray *parameXYZ* exports plus optionally ad-hoc external designs you want to expose as well in your UI-app or CLI-app.

In most cases you want to have the same list of designs for your UI-app and CLI-app. In this case, to get a common list of designs for UI-app and CLI-app, create an additional node-package:

- parameXYZ-list : common list of designs to be exposed in parameXYZ-ui and parameXYZ-cli

[parame52-list]() illustrates such node-package. Then [parame52-ui]() and [parame52]() have to be updated rarely.

### Assembly using external design

Previously we have seen that the UI-app and CLI-app can expose external designs. Now, [parame52]() illustrates how a new design can reuse an external design.

### Contour with arcs

### Functions defining a Contour

### Transitive reuse of external designs

### Defining sub-designs

### Add points, lines, vectors and dynamics decorations

### Just a 2D drawing

### A serie of blade profiles


<style lang="scss">
	@use '$lib/style/colors.scss';

	h2 {
		counter-reset: h3count;
	}
	h3::before {
		counter-increment: h3count;
		content: counter(h3count) "- ";
	}
</style>
