---
title: Geom's tutorial
category: documentation
---

<script lang="ts">
	import { base } from '$app/paths';
</script>


# {title}

## Design examples

Below three repositories showcasing the usage of the library [geometrix](https://www.npmjs.com/package/geometrix) and its associated framework [parametrix](https://github.com/charlyoleg2/parametrix):

1. [parame51](https://github.com/charlyoleg2/parame51) containing the library [desi51](https://www.npmjs.com/package/desi51) and the associated UI [desi51-ui](https://charlyoleg2.github.io/parame51/)
2. [parame52](https://github.com/charlyoleg2/parame52) containing the library [desi52](https://www.npmjs.com/package/desi52) and the associated UI [desi52-ui](https://charlyoleg2.github.io/parame52/)
3. [parame53](https://github.com/charlyoleg2/parame53) containing two libraries [desi53](https://www.npmjs.com/package/desi53) and [desi53b](https://www.npmjs.com/package/desi53b) and the associated UI [desi53-ui](https://charlyoleg2.github.io/parame53/)

## Tutorial of the Geometrix concepts

### Simple design

- [myPartA source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartA.ts)
- [myPartA page](https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartA)

*myPartA* goes through the required [steps](https://charlyoleg2.github.io/parametrix/docs/geom_user#main_steps) of a 3D part description.

Programmatically, defining a 3D-part-design consists of creating a [const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) object of type *tPageDef*.

API:

- <a href="{base}/docs/apidoc/interfaces/geometrix.tPageDef.html" rel="external">tPageDef</a>


### Parameter types

- [myPartB source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartB.ts)
- [myPartB page](https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartB)

*myPartB* illustrates the usage of the 3 types of parameters:

- *numerical* parameter
- *dropdown* parameter
- *checkbox* parameter

API:

- <a href="{base}/docs/apidoc/functions/geometrix.pNumber.html" rel="external">pNumber()</a>
- <a href="{base}/docs/apidoc/functions/geometrix.pDropdown.html" rel="external">pDropdown()</a>
- <a href="{base}/docs/apidoc/functions/geometrix.pCheckbox.html" rel="external">pCheckbox()</a>


### Extrusion and 3D construction

- [myPartC source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartC.ts)
- [myPartC page](https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartC)

*myPartC* illustrates the usage of the 2 types of extrusion:

- *linear-orthogonal* extrusion along the axis Oz
- *rotation-revolution* extrusion along the axis Oy

And the usage of the 4 types of boolean operations:

- *identity* : just an alias to the first element of the list
- *union* : merge/fuse the list of parts in one part
- *substraction* : remove from the first element of the list the overlaping portion of the rest of the list
- *intersection* : common portion of all elements of the list

API:

- <a href="{base}/docs/apidoc/enums/geometrix.EExtrude.html" rel="external">EExtrude</a>
- <a href="{base}/docs/apidoc/enums/geometrix.EBVolume.html" rel="external">EBVolume</a>


### Evidences of the power of 2D technical drawings

- [myPartD source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartD.ts)
- [myPartD page](https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartD)

*myPartD* has simple 2D figures but a complex 3D shape. 2D technical drawing provides a simple representation of complex shape.


### Contour creation with absolute/relative cartesian/polar coordinates

- [myPartE source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartE.ts)
- [myPartE page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartE)

*myPartE* illustrates how to create contours using the four types of coordinates:

- cartesian absolute : X,Y relative to the figure origin
- cartesian relative : x,y relative to the previous point of the contour
- polar absolute : angle, length relative to the figure origin
- polar relative : angle relative to the horizontal, length relative to the previous point

The first point of a *contour* is always in *cartesian absolute*.

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeA" rel="external">.addSegStrokeA()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeR" rel="external">.addSegStrokeR()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeAP" rel="external">.addSegStrokeAP()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeRP" rel="external">.addSegStrokeRP()</a>


### Contour corner options

- [myPartF source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartF.ts)
- [myPartF page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartF)

*myPartF* illustrates how to apply the four possible corner types:

- pointed (i.e. no corner)
- rounded
- widened
- wideAcc

The corner of the first point of a *contour* can be set at the begining of the contour chain or at the end of the contour chain.

In the UI, click on the checkboc *main skeleton* and *points* to activate the corresponding drawing layers. It helps to understand the *contours*.

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerPointed" rel="external">.addCornerPointed()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerRounded" rel="external">.addCornerRounded()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerWidened" rel="external">.addCornerWidened()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerWideAcc" rel="external">.addCornerWideAcc()</a>


### Contour transformations

- [myPartG source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartG.ts)
- [myPartG page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartG)

*myPartG* illustrates how to apply the four following transformations on *contours*:

- rotate contour
- scale contour
- translate contour with parameters x,y
- translate contour with parameters angle,length

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#rotate" rel="external">.rotate()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#scale" rel="external">.scale()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#translate" rel="external">.translate()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#translatePolar" rel="external">.translatePolar()</a>


### Partial contour

- [myPartH source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartH.ts)
- [myPartH page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartH)

*myPartH* illustrates how to create a *partial contour* (i.e. a not closed contour) and re-use it several times to create complete contour (i.e. a closed contour).

The method *.addPartial()* automatic translate the new piece of contour, so the first point of the partial contour fits with the last point of the contour.

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addPartial" rel="external">.addPartial()</a>


### Figure transformations

- [myPartI source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartI.ts)
- [myPartI page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartI)

*myPartI* illustrates how to apply to all layers of a figures the following transformations:

- rotate figure
- translate figure with parameters x,y
- translate figure with parameters angle,length

*myPartI* illustrates also how to merge figures together.

This design is using the *time parameter t*. Play with the time control to see the effect of this *t* parameter.

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Figure.html#rotate" rel="external">.rotate()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Figure.html#translate" rel="external">.translate()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Figure.html#translatePolar" rel="external">.translatePolar()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Figure.html#mergeFigure" rel="external">.mergeFigure()</a>


### Re-using figures of other designs

- [myPartJ source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartJ.ts)
- [myPartJ page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartJ)

*myPartJ* illustrates how to re-use figures defined in other designs. *myPartJ* imports the designs *myPartF*, *myPartG* and *myPartI* to use their figures.

The optional sub-design section is populated. In the UI, links to the sub-designs with their parameters have been generated.

API:

- <a href="{base}/docs/apidoc/functions/geometrix.designParam-1.html" rel="external">designParam()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#setVal" rel="external">.setVal()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#getParamVal" rel="external">.getParamVal()</a>
- <a href="{base}/docs/apidoc/functions/geometrix.checkGeom.html" rel="external">checkGeom()</a>
- <a href="{base}/docs/apidoc/functions/geometrix.prefixLog.html" rel="external">prefixLog()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Figure.html#mergeFigure" rel="external">.mergeFigure()</a>
- <a href="{base}/docs/apidoc/types/geometrix.tSubDesign.html" rel="external">tSubDesign</a>


### Assembly of 3D-parts

- [myPartK source](https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartK.ts)
- [myPartK page](https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartK)

*myPartK* assembles 3D-parts defined in other designs. *myPartK* imports the designs *myPartA* and *myPartD* to use their *volume definitions*.

API:

- <a href="{base}/docs/apidoc/interfaces/geometrix.tInherit.html" rel="external">tInherit</a>
- <a href="{base}/docs/apidoc/types/geometrix.tSubDesign.html" rel="external">tSubDesign</a>
- <a href="{base}/docs/apidoc/functions/geometrix.designParam-1.html" rel="external">designParam()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#getSuffix" rel="external">.getSuffix()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#getPartNameSuffix" rel="external">.getPartNameSuffix()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#getPartName" rel="external">.getPartName()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.DesignParam.html#getDesignParamList" rel="external">.getDesignParamList()</a>


### Generic UI-app and CLI-app

- [myPartL source](https://github.com/charlyoleg2/parame52/blob/main/desi52/src/pointedCorners/myPartL.ts)
- [myPartL page](https://charlyoleg2.github.io/parame52/desi52/myPartLDef)

*myPartL* is a simple design of Maltese cross to showcase how to use the generic UI-app and CLI-app.

#### Context

When you develop your own 3D part library (like [parame51](https://github.com/charlyoleg2/parame51)) you typically create 3 node-packages:

- parameXYZ : your 3D part library
- parameXYZ-ui : the sveltekit project to visualize your work in a Web-UI
- parameXYZ-cli : a CLI to export your work from command-line

In *parameXYZ-ui* and *parameXYZ-cli* you define the list of designs you want to expose. Usually it corresponds to the list your 3D part library *parameXYZ* exports plus optionally ad-hoc external designs you want to expose as well in your UI-app or CLI-app.

#### Solution

In most cases you want to expose in UI-app and CLI-app all the designs defined in your library and you don't want to spend effort to create and maintain those UI-app and CLI-app. The helper repository [parame_paxApps](https://github.com/charlyoleg2/parame_paxApps) provides such generic UI-app and CLI-app, as well as an helper script, so you don't have to take care of the UI-app and CLI-app.

#### HowTo

Below the recipe to benefit from the generic UI-app and CLI-app for *geometrix design libraries*:

- your repo is a monorepo that contains one or several sub-packages of your *geometrix design library*
- degit https://github.com/charlyoleg2/parame_paxApps/paxApps in your repo
- gitignore the directory *paxApps*
- In the top-monorepo *package.json*:
	- add the section *paxApps* for configuring those generic UI-app and CLI-app
	- complete the scripts for build automation
- build the all and you get all the designs of your library exposed in UI-app and CLI-app

The section *paxApps* of the *package.json* looks like:

```json
"paxApps": {
	"colorBg": "DarkCyan",
	"colorTitle": "AquaMarine",
	"libs": [
		"desi52"
	]
}
```

#### Template recommendation

For starting a new *geometrix design library*, use [parame52](https://github.com/charlyoleg2/parame52) as template. If you want to create several *geometrix design libraries* in your repo, use [parame53](https://github.com/charlyoleg2/parame53) as template.


### Contour with arcs

- [myPartM source](https://github.com/charlyoleg2/parame52/blob/main/desi52/src/pointedCorners/myPartM.ts)
- [myPartM page](https://charlyoleg2.github.io/parame52/desi52/myPartMDef)

*myPartM* illustrates how to define arcs. *Geometrix* offers three ways to define arcs.

API:

- <a href="{base}/docs/apidoc/functions/geometrix.point-1.html" rel="external">point()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Point.html#middlePoint" rel="external">.middlePoint()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Point.html#translatePolar" rel="external">.translatePolar()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addPointA" rel="external">.addPointA()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegArc" rel="external">.addSegArc()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegArc2" rel="external">.addSegArc2()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSegArc3" rel="external">.addSegArc3()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#closeSegArc" rel="external">.closeSegArc()</a>


### Contour with arcs and modified corners

- [myPartN source](https://github.com/charlyoleg2/parame52/blob/main/desi52/src/modifiedCorners/myPartN.ts)
- [myPartN page](https://charlyoleg2.github.io/parame52/desi52/myPartNDef)

*myPartN* illustrates a design with arcs and modified corners.

API:

- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerPointed" rel="external">.addCornerPointed()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerRounded" rel="external">.addCornerRounded()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerWidened" rel="external">.addCornerWidened()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addCornerWideAcc" rel="external">.addCornerWideAcc()</a>


### Contour with double-arcs

- [myPartO source](https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53/src/myGroup5/myPartO.ts)
- [myPartO page](https://charlyoleg2.github.io/parame53/desi53/myPartODef)

*myPartO* illustrates double-arcs. Use double-arcs where you want to ensure the continuity of the derivate (i.e. tangent).

API:

- <a href="{base}/docs/apidoc/functions/geometrix.point-1.html" rel="external">point()</a>
- <a href="{base}/docs/apidoc/enums/geometrix.ShapePoint.html" rel="external">ShapePoint</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addPointA" rel="external">.addPointA()</a>
- <a href="{base}/docs/apidoc/classes/geometrix.Contour.html#addSeg2Arcs" rel="external">.addSeg2Arcs()</a>


### Functions defining a Contour

### Add points, lines, vectors and dynamics decorations

### Just a 2D drawing

### A serie of blade profiles


### Expose external design

[parame52-ui]() might expose designs externally defined (not coming from *parame52*). In this case, you must manually copy the svg-files in the *static* directoty of the *sveltekit* project *parame52-ui*.

### Assembly using external design

Previously we have seen that the UI-app and CLI-app can expose external designs. Now, [parame52]() illustrates how a new design can reuse an external design.

### Transitive reuse of external designs


<style lang="scss">
	@use '$lib/style/colors.scss';

	h2 {
		counter-reset: h3count;
	}
	h3::before {
		counter-increment: h3count;
		content: counter(h3count) "- ";
	}
</style>
