--- node_modules/vite/dist/node/index.d.ts	2024-02-04 20:00:11.342850294 +0100
+++ ../index.d.ts	2024-02-04 11:23:24.392320738 +0100
@@ -94,6 +94,9 @@
   getWatched(): {
     [directory: string]: string[]
   }
+  ref(): this
+
+  unref(): this
 
   /**
    * Removes all listeners from watched files.
@@ -826,7 +829,7 @@
     getModuleById(id: string): ModuleNode | undefined;
     getModulesByFile(file: string): Set<ModuleNode> | undefined;
     onFileChange(file: string): void;
-    invalidateModule(mod: ModuleNode, seen?: Set<ModuleNode>, timestamp?: number, isHmr?: boolean, 
+    invalidateModule(mod: ModuleNode, seen?: Set<ModuleNode>, timestamp?: number, isHmr?: boolean,
     ): void;
     invalidateAll(): void;
     /**
@@ -837,7 +840,7 @@
      * @param staticImportedUrls Subset of `importedModules` where they're statically imported in code.
      *   This is only used for soft invalidations so `undefined` is fine but may cause more runtime processing.
      */
-    updateModuleInfo(mod: ModuleNode, importedModules: Set<string | ModuleNode>, importedBindings: Map<string, Set<string>> | null, acceptedModules: Set<string | ModuleNode>, acceptedExports: Set<string> | null, isSelfAccepting: boolean, ssr?: boolean, 
+    updateModuleInfo(mod: ModuleNode, importedModules: Set<string | ModuleNode>, importedBindings: Map<string, Set<string>> | null, acceptedModules: Set<string | ModuleNode>, acceptedExports: Set<string> | null, isSelfAccepting: boolean, ssr?: boolean,
     ): Promise<Set<ModuleNode> | undefined>;
     ensureEntryFromUrl(rawUrl: string, ssr?: boolean, setIsSelfAccepting?: boolean): Promise<ModuleNode>;
     createFileOnlyEntry(file: string): ModuleNode;
