import"../chunks/DsnmJJEf.js";import"../chunks/KVwREm06.js";import{f as L,a as N,s as e,d as t,t as j,b as q,r as i}from"../chunks/DDEMFpgR.js";import{s as D}from"../chunks/BRgS8L5A.js";import{h as m}from"../chunks/Dcfbj2X8.js";import{s as o}from"../chunks/BjLAz-Yc.js";import{l as F,s as S}from"../chunks/CNFyQYs2.js";import{D as G}from"../chunks/BYj1kNXT.js";import{b as a}from"../chunks/Cwx_AFnf.js";const b={title:"Involute of circle",category:"documentation"},{title:V,category:ee}=b;var z=L('<h1> </h1> <h2>Definition of an involute of circle</h2> <p>An <em>involute of circle</em> is the curve drawn by the extremity of a string rolled out from a <em>base circle</em>. The shape of an involute depends only on the size of the <em>base circle</em> (i.e. its radius). An <em>involute of circle</em> is completely defined with the radius of the <em>base circle</em> and the angle of the start position.</p> <p><img alt="involute_of_circle_R0.svg"/> <img alt="negative_involute_of_circle_R0.svg"/></p> <pre class="language-undefined"><!></pre> <p>So we can calculate directly (with a formula):</p> <ul><li>With u, we get L and w</li> <li>With L, we get u and then w</li> <li>With w, we can not get u directly. We can only approximate it iteratively</li></ul> <p>The curve of the <em>involute of circle</em> can be described with <em>polar coordinates</em> as a <em>parametric function</em>:</p> <pre class="language-undefined"><!></pre> <h2>Properties of an involute of circle</h2> <p><img alt="involute_of_circle_Ri1_u0.svg"/> <img alt="involute_of_circle_Ri2_u2.svg"/></p> <pre class="language-undefined"><!></pre> <p>For any initial angle i1 of an <em>involute of circle</em>, we construct the line called <em>line of action</em> or <em>line of pressure</em> going through B, the first point of the involute at the initial position i1 and the angle of inclination i1 - PI / 2. With those definitions we have those results:</p> <ul><li>The angle of inclination of the tangent of B is i1</li> <li>For any rotation of angle j, it exists a point C at the intersection of the involute and the <em>line of action</em></li> <li>The angle of inclination of the tangent of C is i1</li> <li>The distance BC is R*j</li></ul> <p>Conclusion, if we have a plan with an inclination angle i3, it will be pushed by an <em>involute of circle</em> with initial angle i3. The pressure of the involute on the plan is always along the line of inclination angle i3 - PI / 2. This line is called <em>line of pressure</em> or <em>line of action</em>. If the <em>base circle</em> of the involute rotates at a constanst <em>angular speed</em> J, then the plan is pushed at the <em>linear speed</em> RJ with R the radius of the <em>base circle</em>.</p> <h2>Contact point</h2> <p>The <em>position</em> and <em>instant speed</em> of the contact point C of an <em>involute of circle</em> with the virtual plan perpendicular to the <em>line of action</em>.</p> <p><img alt="point_c_position_and_speed_positive.svg"/> <img alt="point_c_position_and_speed_negative.svg"/></p> <h2>Speed ratio</h2> <p>If the first base circle rotates at the angular speed J1, the point of contact C moves at the linear speed <code>VC = J1*br1</code>. We also have <code>VC = J2*br2</code>. The counter gearwheel rotates then at the angular speed <code>J2 = VC/br2 = J1*br1/br2</code>. So the angular speed ratio is the inverse ratio of the radius of the base circles.</p> <p>In order to switch smoothly from one tooth to an other, this ratio must also be equal to <code>N1/N2</code>.</p> <p>Finaly we have <code>J2/J1 = br1/br2 = N1/N2</code>.</p> <h2>Calculation of initAngle2</h2> <p><img alt="calculation_of_initAngle2.svg"/></p> <p>Recipe to calculate the initAngle2 for the right side:</p> <ul><li>Starting from <em>initAngle1</em>, the angle position of the primary point of the first tooth</li> <li>substract the angle <em>W-primary-1</em> to get the starting of the <em>involute of circle</em></li> <li>In a loop, substract the tooth angle period to get the first angle aBP for start of <em>involute of circle</em></li> <li>Compute the length lBD of the action line</li> <li>Compute the length on the action line between two contact points: <code>2*PI/N1*brr1 = 2*PI/N2*brr2</code></li> <li>Get the first start of <em>involute of circle</em> in the second gearwheel coordinate <code>lBD-aBP*brr1</code></li> <li>Get the first start of <em>involute of circle</em> of the second gearwheel</li> <li>Get the angle position of the primary point <em>initAngle2</em> of the <em>arbitrary</em> first tooth of the second gearwheel by adding the angle <em>W-primary-2</em></li></ul> <h2>Angle kitchen</h2> <p><img alt="right_side_angle_kitchen.svg"/> <img alt="left_side_angle_kitchen.svg"/></p>',1);function te(y,R){const $=F(R,["children","$$slots","$$events","$$legacy"]);G(y,S(()=>$,()=>b,{children:(C,O)=>{var d=z(),n=N(d),B=t(n,!0);i(n);var l=e(n,6),f=t(l),I=e(f,2);i(l);var r=e(l,2),A=t(r);m(A,()=>`<code class="language-undefined">OB=R
BC=arc(BA)=u*R
L=OC=sqrt(R**2+(u*R)**2)=R*sqrt(1+u**2)
u=v+w
v=atan(u*R/R)=atan(u) if u&lt;PI/2
w=u-v=u-atan(u)
u=sqrt((L/R)**2-1)
u=f(w)? [I don&#39;t know how to calculate analytically u from w]</code>`),i(r);var s=e(r,8),J=t(s);m(J,()=>'<code class="language-undefined">u -&gt; [L: R*sqrt(1+u**2), w: u-atan(u)]</code>'),i(s);var c=e(s,4),u=t(c),P=e(u,2);i(c);var h=e(c,2),T=t(h);m(T,()=>`<code class="language-undefined">if we choose u2=-j=i1-i2, then
- C is on BF
- BC = R*u2 = -j*R = R*i1-R*i2
- dBC/dt = -R*di2/dt = R*dj/dt
- inclination of tangent in C = i1</code>`),i(h);var p=e(h,12),v=t(p),W=e(v,2);i(p);var g=e(p,12),x=t(g);i(g);var _=e(g,8),w=t(_),k=e(w,2);i(_),j(()=>{D(B,V),o(f,"src",`${a??""}/pgdsvg/involute_of_circle_R0.svg`),o(I,"src",`${a??""}/pgdsvg/negative_involute_of_circle_R0.svg`),o(u,"src",`${a??""}/pgdsvg/involute_of_circle_Ri1_u0.svg`),o(P,"src",`${a??""}/pgdsvg/involute_of_circle_Ri2_u2.svg`),o(v,"src",`${a??""}/pgdsvg/point_c_position_and_speed_positive.svg`),o(W,"src",`${a??""}/pgdsvg/point_c_position_and_speed_negative.svg`),o(x,"src",`${a??""}/pgdsvg/calculation_of_initAngle2.svg`),o(w,"src",`${a??""}/pgdsvg/right_side_angle_kitchen.svg`),o(k,"src",`${a??""}/pgdsvg/left_side_angle_kitchen.svg`)}),q(C,d)},$$slots:{default:!0}}))}export{te as component};
