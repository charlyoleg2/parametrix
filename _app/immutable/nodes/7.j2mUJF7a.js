import"../chunks/DsnmJJEf.js";import"../chunks/KVwREm06.js";import{f as Z,a as ee,d as e,r as i,s as a,n as ie,t as ae,b as re}from"../chunks/DDEMFpgR.js";import{s as te}from"../chunks/BRgS8L5A.js";import{s as r}from"../chunks/BjLAz-Yc.js";import{l as se,s as oe}from"../chunks/CNFyQYs2.js";import{D as le}from"../chunks/BYj1kNXT.js";import{b as t}from"../chunks/Cwx_AFnf.js";const P={title:"Parametrix concepts",category:"documentation"},{title:ne,category:we}=P;var pe=Z(`<h1> </h1> <h2>Parametrix presentation</h2> <p>Parametrix is programmatic CAD tool. It provides an API (called <em>geometrix</em>) for modelling 2D shapes and 3D shapes. When you are done with your desing, <em>Parametrix</em> generates a web-UI for exposing your design.</p> <h3>Features</h3> <ol><li>Modern interface between <em>designers</em> and <em>makers</em></li> <li>Automatic generation of CLI and UI</li> <li>Extendable for simulation (e.g. <a href="https://charlyoleg2.github.io/parame78/desi78/lens_x3" rel="nofollow">optics simulator</a>) and design workbench (e.g. sheet metal)</li> <li>Optimized for G-code and common manufacturing process</li> <li>Built on top of several CAD tools (act also as unified API for the suported CAD tools)</li> <li>Simple deployment via <a href="https://www.npmjs.com/search?q=parametrix" rel="nofollow">npm</a></li> <li>Online and offline access</li> <li>Well integrated in git workflow (e.g. <a href="https://github.com/charlyoleg2/heliostat_model_50cm" rel="nofollow">heliostat_model_50cm</a>)</li> <li>Simple and powerful API for modelling including corner rounding feature</li> <li>The full power of <em>Javacript</em> for modelling your shapes</li> <li>Streamline core library of only 6000 lines of code easy to maintain</li></ol> <h3>CAD Flow</h3> <h4>Traditional CAD Flow</h4> <p><img alt="cad_flow_traditional.svg"/></p> <p>When you design your 3D-shape within a CAD tool, your work-product depends on this tool. If this tool becomes unavailable because technical, legal or commercial raison, you lose your work.</p> <h4>CAD Flow with Parametrix</h4> <p><img alt="cad_flow_with_parametrix.svg"/></p> <p>The 3 main advantages of the <em>parametrix</em> flow:</p> <ul><li><em>Parametrix</em> helps keeping your work persistent because it is agnostic to any CAD solution. Your 3D-shape is described in <em>Javascript</em> with a dependency on the small library <em>geometrix</em>.</li> <li>The intermediate step of <em>webui</em> gives more autonomy to the <em>maker</em>. He can adjust sizings of the design himself without asking the <em>designer</em>.</li> <li>Having the 3D-shape described in <em>Javascript</em> helps providing high quality 3D-data and let you benefit from all the software developer tools including <em>git</em> for versioning and sharing.</li></ul> <h3>Parametrix workflow</h3> <p><img alt="parametrix_workflow.svg"/></p> <h3>Designers and makers</h3> <p><img alt="designer_maker_interfaces.svg"/></p> <h3>Parametrix scope</h3> <p><img alt="parametrix_3D_shape_subset.svg"/></p> <h3>More explanations</h3> <p>The user of Parametrix gets:</p> <ul><li>2D</li> <li>web app</li> <li>programmatic</li> <li>parametrizable</li> <li>simulation included</li></ul> <p>The programmer of Parametrix design (a.k.a. Designix) gets an API with:</p> <ul><li>circle, stroke and arc</li> <li>corner widening or rounding</li> <li>export to DXF, SVG</li> <li>compatible with FreeCAD</li> <li>lines and arcs ready for CAM tools ;)</li></ul> <p><img alt="corner_options.svg"/></p> <p>The API provides options for rounding or widening corners of outlines. Itâ€™s useful for:</p> <ul><li>good looking parts</li> <li>manufacturabilty</li> <li>improve mechanical strength</li></ul> <h3>Programmatic CAD</h3> <p>Instead of using <em>graphical tools</em> like <a href="https://www.freecad.org/" rel="nofollow">FreeCAD</a>, <em>Programmatic CAD</em> is the process of generating CAD designs from software code. Below some benefits of this approach:</p> <ul><li>designs managed by software development tools like <a href="https://git-scm.com/" rel="nofollow">git</a></li> <li>lightweight. Typically you need a text-editor and a small viewer</li> <li>complex parametrization are better solved by software</li> <li>repeated pattern are easier to implement and maintained</li> <li>curve from complex mathematical formula</li> <li>can be integrated in web-backend or software automation chain</li></ul> <h3>CAD flow comparsion</h3> <p><img alt="comparison_of_cad_flows.svg"/></p> <p>Low-tech CAD
pros:</p> <ul><li>less computer demanding</li> <li>scalability of established designs
cons:</li> <li>restricted to subset of 3D shapes</li> <li>complex 2D programmatic design</li></ul> <p><img alt="low_tech_path.svg"/></p> <p><img alt="high_tech_path.svg"/></p> <p>The constraints of part manufacturing and low-tech CAD shaping concept are similar. As consequences:</p> <ul><li>low-tech CAD is good enough for mechanical parts</li> <li>too restrictive for esthetic/design parts</li></ul> <p>Extruded-2D-design is good enough for 90% of technical parts</p> <p><img alt="gui_vs_programmatic.svg"/></p> <h3>Parametrix versus traditional CAD tools</h3> <h4>Pros of Parametrix</h4> <ul><li>Use standard software toold and flow</li> <li>branch and history provided by git</li> <li>very accurate modification tracking</li> <li>design-input via text-editor</li> <li>design shared through url/web-page</li> <li>extensive parametrization eases design re-use</li> <li>explicit list of parameters</li> <li>possibility to implement complex logic</li> <li>2D drawings are free</li> <li>run in the browser (lightweight)</li> <li>can be scripted</li></ul> <h4>Cons of Parametrix</h4> <ul><li>No straight method for managing assembly</li> <li>No export with dimensions</li> <li>2D drawings are free and can contains bugs</li> <li>no direct 3D rendering</li></ul> <h3>Shape description</h3> <p><img alt="geometry_descriptive.svg"/></p> <p>In <em>Parametrix</em>, a 2D-figure is a collection of 2D-contours. A 2D-contour is a close-path made out of a <em>straight strokes</em> and <em>arcs of circle</em>. A 2D-contour might describe the outer shape or inner holes of the final part. Each 2D-figure describes the final part from a specific direction according to the <em>technical drawing</em> methodology. The 3D-shape is the recipe of how to extrude the 2D-figures and how to combine (boolean operations: union, intersection, substration) them to create the final part.</p> <p><img alt="shape_description_tree.svg"/></p> <p>In <em>Parametrix</em>, a <em>design</em> is a 3D-shape. This 3D-shape is defined by a recipe and a collection of 2D-figures. Each 2D-figure consists of the following layers: <em>main</em>, <em>second</em>, <em>dynamics</em>, <em>points</em>, <em>lines</em> and <em>vectors</em>. Only the layer <em>main</em> is used in the final 3D-shape. The other layers are only helpers for debugging and simulation. The layers <em>main</em>, <em>second</em> and <em>dynamics</em> are collections of <em>Contours</em>. A <em>Contour</em> can be either a <em>circle</em> or a <em>close-path</em>. A close-path is made out of <em>straight strokes</em> and <em>arcs-of-circle</em>.</p> <h3>Future tools around Parametrix</h3> <p><img alt="parametrix_galaxi.svg"/></p> <h2>Web app</h2> <p><img alt="software_stack.svg"/></p> <p>web app characteristics</p> <ul><li>[+] security</li> <li>[+] ubiquity</li> <li>[+] no installation</li> <li>[+] OS agnostic</li> <li>[+] browser agnostic (web standards)</li> <li>[-] no file access</li> <li>[+] could be installed locally for offline usage</li> <li>[+] fast development of GUI</li> <li>[-] restricted to web protocols</li> <li>[-] restricted hardware access</li></ul> <p>native app characteristics</p> <ul><li>[+] performance</li> <li>[+] multi-threading</li> <li>[+] many programming languages</li> <li>[+] compiled or interpreted</li> <li>[+] run with internet-off</li> <li>[-] OS dependent</li> <li>[-] complex development of GUI</li> <li>[+] any network protocol</li> <li>[+] access to hardware</li></ul> <p><img alt="javascript_timeline.svg"/></p> <p>In 2023 the eco-system for developing web-apps is mature.</p> <ul><li><a href="https://nodejs.org" rel="nofollow">nodejs</a> V18 is the first LTS with official support for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" rel="nofollow">ESM</a>.</li> <li><a href="https://kit.svelte.dev/" rel="nofollow">SvelteKit</a> is the first frontend framework that support <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" rel="nofollow">ESM</a>.</li></ul> <h2>Development</h2> <h3>actors</h3> <p><img alt="users_around_parametrix.svg"/></p> <h3>repos and packages overview</h3> <p><img alt="repos_and_packages.svg"/></p> <h3>npm-packages of parametrix</h3> <ul><li>geometrix</li> <li>designix</li> <li>geomui</li> <li>geomcli</li> <li>designix-cli</li> <li>designix-ui</li> <li>designix-uis</li> <li>paramui</li> <li>designix-script-js</li> <li>designix-script-ts</li></ul> <h3>npm-packages of create-parametrix</h3> <ul><li>create-parametrix</li></ul> <h2>Generalization of the design-webapp concept</h2> <p>The concept of <em>Parametrix</em> for generating webapp can be extended to other disciplines like:</p> <ul><li>electronic</li> <li>digital-design/FPGA-design</li> <li>simple-software state-machine</li> <li>music</li></ul> <p><img alt="concept_of_webapp_generator.svg"/></p> <p>For each of those domains, an <em>author</em> creates designs in <em>javascript</em>. From there the framework generates a webapp. Finally the end-user parametrises a design and gets his customized instance of the design.</p> <p><img alt="helper_apps_for_design_webapp.svg"/></p> <p>The <em>authors</em> generate many independant webapp for exposing there designs. 3 helper-apps could complete the offer:</p> <ul><li>A search-engine for selecting/finding the wished design</li> <li>A visualizer for displaying a parametrized design</li> <li>An assembler for managing the parameters and the combination of several designs</li></ul> <p><img alt="distribution_of_design_apps.svg"/></p> <p>A <em>javascript</em> design library can be distributed in several ways:</p> <ul><li>as a website publised on internet</li> <li>as a local website, distributed via npm-packages</li> <li>as a local command-line-interface, distributed via npm-packages</li> <li>as npm-package being imported in other javascripts</li></ul>`,1);function be(C,I){const T=se(I,["children","$$slots","$$events","$$legacy"]);le(C,oe(()=>T,()=>P,{children:(S,me)=>{var A=pe(),s=ee(A),z=e(s,!0);i(s);var o=a(s,14),F=e(o);i(o);var l=a(o,6),j=e(l);i(l);var n=a(l,8),G=e(n);i(n);var p=a(n,4),M=e(p);i(p);var m=a(p,4),U=e(m);i(m);var g=a(m,12),E=e(g);i(g);var c=a(g,14),W=e(c);i(c);var d=a(c,6),J=e(d);i(d);var h=a(d,2),O=e(h);i(h);var u=a(h,8),q=e(u);i(u);var f=a(u,14),L=e(f);i(f);var v=a(f,4),B=e(v);i(v);var _=a(v,6),H=e(_);i(_);var w=a(_,4),N=e(w);i(w);var b=a(w,10),V=e(b);i(b);var x=a(b,10),K=e(x);i(x);var y=a(x,4),X=e(y);i(y);var D=a(y,16),Y=e(D);i(D);var k=a(D,4),Q=e(k);i(k);var $=a(k,6),R=e($);i($),ie(4),ae(()=>{te(z,ne),r(F,"src",`${t??""}/puisvg/cad_flow_traditional.svg`),r(j,"src",`${t??""}/puisvg/cad_flow_with_parametrix.svg`),r(G,"src",`${t??""}/puisvg/parametrix_workflow.svg`),r(M,"src",`${t??""}/puisvg/designer_maker_interfaces.svg`),r(U,"src",`${t??""}/puisvg/parametrix_3D_shape_subset.svg`),r(E,"src",`${t??""}/puisvg/corner_options.svg`),r(W,"src",`${t??""}/puisvg/comparison_of_cad_flows.svg`),r(J,"src",`${t??""}/puisvg/low_tech_path.svg`),r(O,"src",`${t??""}/puisvg/high_tech_path.svg`),r(q,"src",`${t??""}/puisvg/gui_vs_programmatic.svg`),r(L,"src",`${t??""}/puisvg/geometry_descriptive.svg`),r(B,"src",`${t??""}/puisvg/shape_description_tree.svg`),r(H,"src",`${t??""}/puisvg/parametrix_galaxi.svg`),r(N,"src",`${t??""}/puisvg/software_stack.svg`),r(V,"src",`${t??""}/puisvg/javascript_timeline.svg`),r(K,"src",`${t??""}/puisvg/users_around_parametrix.svg`),r(X,"src",`${t??""}/puisvg/repos_and_packages.svg`),r(Y,"src",`${t??""}/puisvg/concept_of_webapp_generator.svg`),r(Q,"src",`${t??""}/puisvg/helper_apps_for_design_webapp.svg`),r(R,"src",`${t??""}/puisvg/distribution_of_design_apps.svg`)}),re(S,A)},$$slots:{default:!0}}))}export{be as component};
