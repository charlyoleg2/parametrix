import"../chunks/DsnmJJEf.js";import"../chunks/KVwREm06.js";import{f as ll,a as tl,s as r,d as e,t as ol,b as il,r as a}from"../chunks/DDEMFpgR.js";import{s as sl}from"../chunks/BRgS8L5A.js";import{h as ml}from"../chunks/Dcfbj2X8.js";import{s as l}from"../chunks/BjLAz-Yc.js";import{l as nl,s as cl}from"../chunks/CNFyQYs2.js";import{D as hl}from"../chunks/BYj1kNXT.js";import{b as t}from"../chunks/Cwx_AFnf.js";const pa={title:"Geom's tutorial",category:"documentation"},{title:pl,category:$l}=pa;var dl=ll('<h1> </h1> <h2 class="svelte-231qb5">Design examples</h2> <p>Below three repositories showcasing the usage of the library <a href="https://www.npmjs.com/package/geometrix" rel="nofollow">geometrix</a> and its associated framework <a href="https://github.com/charlyoleg2/parametrix" rel="nofollow">parametrix</a>:</p> <ol><li><a href="https://github.com/charlyoleg2/parame51" rel="nofollow">parame51</a> containing the library <a href="https://www.npmjs.com/package/desi51" rel="nofollow">desi51</a> and the associated UI <a href="https://charlyoleg2.github.io/parame51/" rel="nofollow">desi51-ui</a></li> <li><a href="https://github.com/charlyoleg2/parame52" rel="nofollow">parame52</a> containing the library <a href="https://www.npmjs.com/package/desi52" rel="nofollow">desi52</a> and the associated UI <a href="https://charlyoleg2.github.io/parame52/" rel="nofollow">desi52-ui</a></li> <li><a href="https://github.com/charlyoleg2/parame53" rel="nofollow">parame53</a> containing two libraries <a href="https://www.npmjs.com/package/desi53" rel="nofollow">desi53</a> and <a href="https://www.npmjs.com/package/desi53b" rel="nofollow">desi53b</a> and the associated UI <a href="https://charlyoleg2.github.io/parame53/" rel="nofollow">desi53-ui</a></li></ol> <h2 class="svelte-231qb5">Tutorial of the Geometrix concepts</h2> <h3 class="svelte-231qb5">Simple design</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartA.ts" rel="nofollow">myPartA source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartA" rel="nofollow">myPartA page</a></li></ul> <p><em>myPartA</em> goes through the required <a href="https://charlyoleg2.github.io/parametrix/docs/geom_user#main_steps" rel="nofollow">steps</a> of a 3D part description.</p> <p>Programmatically, defining a 3D-part-design consists of creating a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow">const</a> object of type <em>tPageDef</em>.</p> <p>API:</p> <ul><li><a rel="external">tPageDef</a></li></ul> <h3 class="svelte-231qb5">Parameter types</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartB.ts" rel="nofollow">myPartB source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartB" rel="nofollow">myPartB page</a></li></ul> <p><em>myPartB</em> illustrates the usage of the 3 types of parameters:</p> <ul><li><em>numerical</em> parameter</li> <li><em>dropdown</em> parameter</li> <li><em>checkbox</em> parameter</li></ul> <p><em>myPartB</em> also illustrates the usage of <em>section-separator</em> for grouping the parameters into sections. Those sections helps understanding the parameters. Each section can be hidden for enhancing the <em>user-experience</em>. The first section is created automatically (you donâ€™t need to declare it) and is called <em>main</em>.</p> <p>API:</p> <ul><li><a rel="external">pNumber()</a></li> <li><a rel="external">pDropdown()</a></li> <li><a rel="external">pCheckbox()</a></li> <li><a rel="external">pSectionSeparator()</a></li></ul> <h3 class="svelte-231qb5">Extrusion and 3D construction</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartC.ts" rel="nofollow">myPartC source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartC" rel="nofollow">myPartC page</a></li></ul> <p><em>myPartC</em> illustrates the usage of the 2 types of extrusion:</p> <ul><li><em>linear-orthogonal</em> extrusion along the axis Oz</li> <li><em>rotation-revolution</em> extrusion along the axis Oy</li></ul> <p>And the usage of the 4 types of boolean operations:</p> <ul><li><em>identity</em> : just an alias to the first element of the list</li> <li><em>union</em> : merge/fuse the list of parts in one part</li> <li><em>substraction</em> : remove from the first element of the list the overlaping portion of the rest of the list</li> <li><em>intersection</em> : common portion of all elements of the list</li></ul> <p>API:</p> <ul><li><a rel="external">EExtrude</a></li> <li><a rel="external">EBVolume</a></li></ul> <h3 class="svelte-231qb5">Evidences of the power of 2D technical drawings</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup1/myPartD.ts" rel="nofollow">myPartD source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup1/myPartD" rel="nofollow">myPartD page</a></li></ul> <p><em>myPartD</em> has simple 2D figures but a complex 3D shape. 2D technical drawing provides a simple representation of complex shape.</p> <h3 class="svelte-231qb5">Contour creation with absolute/relative cartesian/polar coordinates</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartE.ts" rel="nofollow">myPartE source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartE" rel="nofollow">myPartE page</a></li></ul> <p><em>myPartE</em> illustrates how to create contours using the four types of coordinates:</p> <ul><li>cartesian absolute : X,Y relative to the figure origin</li> <li>cartesian relative : x,y relative to the previous point of the contour</li> <li>polar absolute : angle, length relative to the figure origin</li> <li>polar relative : angle relative to the horizontal, length relative to the previous point</li></ul> <p>The first point of a <em>contour</em> is always in <em>cartesian absolute</em>.</p> <p>API:</p> <ul><li><a rel="external">.addSegStrokeA()</a></li> <li><a rel="external">.addSegStrokeR()</a></li> <li><a rel="external">.addSegStrokeAP()</a></li> <li><a rel="external">.addSegStrokeRP()</a></li></ul> <h3 class="svelte-231qb5">Contour corner options</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartF.ts" rel="nofollow">myPartF source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartF" rel="nofollow">myPartF page</a></li></ul> <p><em>myPartF</em> illustrates how to apply the four possible corner types:</p> <ul><li>pointed (i.e. no corner)</li> <li>rounded</li> <li>widened</li> <li>wideAcc</li></ul> <p>The corner of the first point of a <em>contour</em> can be set at the begining of the contour chain or at the end of the contour chain.</p> <p>In the UI, click on the checkboc <em>main skeleton</em> and <em>points</em> to activate the corresponding drawing layers. It helps to understand the <em>contours</em>.</p> <p>API:</p> <ul><li><a rel="external">.addCornerPointed()</a></li> <li><a rel="external">.addCornerRounded()</a></li> <li><a rel="external">.addCornerWidened()</a></li> <li><a rel="external">.addCornerWideAcc()</a></li></ul> <h3 class="svelte-231qb5">Contour transformations</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartG.ts" rel="nofollow">myPartG source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartG" rel="nofollow">myPartG page</a></li></ul> <p><em>myPartG</em> illustrates how to apply the four following transformations on <em>contours</em>:</p> <ul><li>rotate contour</li> <li>scale contour</li> <li>translate contour with parameters x,y</li> <li>translate contour with parameters angle,length</li></ul> <p>API:</p> <ul><li><a rel="external">.rotate()</a></li> <li><a rel="external">.scale()</a></li> <li><a rel="external">.translate()</a></li> <li><a rel="external">.translatePolar()</a></li></ul> <h3 class="svelte-231qb5">Partial contour</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartH.ts" rel="nofollow">myPartH source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartH" rel="nofollow">myPartH page</a></li></ul> <p><em>myPartH</em> illustrates how to create a <em>partial contour</em> (i.e. a not closed contour) and re-use it several times to create complete contour (i.e. a closed contour).</p> <p>The method <em>.addPartial()</em> automatic translate the new piece of contour, so the first point of the partial contour fits with the last point of the contour.</p> <p>API:</p> <ul><li><a rel="external">.addPartial()</a></li></ul> <h3 class="svelte-231qb5">Figure transformations</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartI.ts" rel="nofollow">myPartI source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartI" rel="nofollow">myPartI page</a></li></ul> <p><em>myPartI</em> illustrates how to apply to all layers of a figures the following transformations:</p> <ul><li>rotate figure</li> <li>translate figure with parameters x,y</li> <li>translate figure with parameters angle,length</li></ul> <p><em>myPartI</em> illustrates also how to merge figures together.</p> <p>This design is using the <em>time parameter t</em>. Play with the time control to see the effect of this <em>t</em> parameter.</p> <p>API:</p> <ul><li><a rel="external">.rotate()</a></li> <li><a rel="external">.translate()</a></li> <li><a rel="external">.translatePolar()</a></li> <li><a rel="external">.mergeFigure()</a></li></ul> <h3 class="svelte-231qb5">Re-using figures of other designs</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartJ.ts" rel="nofollow">myPartJ source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartJ" rel="nofollow">myPartJ page</a></li></ul> <p><em>myPartJ</em> illustrates how to re-use figures defined in other designs. <em>myPartJ</em> imports the designs <em>myPartF</em>, <em>myPartG</em> and <em>myPartI</em> to use their figures.</p> <p>The optional sub-design section is populated. In the UI, links to the sub-designs with their parameters have been generated.</p> <p>API:</p> <ul><li><a rel="external">designParam()</a></li> <li><a rel="external">.setVal()</a></li> <li><a rel="external">.getParamVal()</a></li> <li><a rel="external">checkGeom()</a></li> <li><a rel="external">prefixLog()</a></li> <li><a rel="external">.mergeFigure()</a></li> <li><a rel="external">tSubDesign</a></li></ul> <p>Those functions are alternatives to <em>normal</em> javascript libraries that could also be used for sharing figures among several designs.</p> <h3 class="svelte-231qb5">Assembly of 3D-parts</h3> <ul><li><a href="https://github.com/charlyoleg2/parame51/blob/main/pkg/desi51/src/myGroup2/myPartK.ts" rel="nofollow">myPartK source</a></li> <li><a href="https://charlyoleg2.github.io/parame51/desi51/myGroup2/myPartK" rel="nofollow">myPartK page</a></li></ul> <p><em>myPartK</em> assembles 3D-parts defined in other designs. <em>myPartK</em> imports the designs <em>myPartA</em> and <em>myPartD</em> to use their <em>volume definitions</em>.</p> <p>API:</p> <ul><li><a rel="external">tInherit</a></li> <li><a rel="external">tSubDesign</a></li> <li><a rel="external">designParam()</a></li> <li><a rel="external">.getSuffix()</a></li> <li><a rel="external">.getPartNameSuffix()</a></li> <li><a rel="external">.getPartName()</a></li> <li><a rel="external">.getDesignParamList()</a></li></ul> <h3 class="svelte-231qb5">Generic UI-app and CLI-app</h3> <ul><li><a href="https://github.com/charlyoleg2/parame52/blob/main/desi52/src/pointedCorners/myPartL.ts" rel="nofollow">myPartL source</a></li> <li><a href="https://charlyoleg2.github.io/parame52/desi52/myPartL" rel="nofollow">myPartL page</a></li></ul> <p><em>myPartL</em> is a simple design of Maltese cross to showcase how to use the generic UI-app and CLI-app.</p> <h4>Context</h4> <p>When you develop your own 3D part library (like <a href="https://github.com/charlyoleg2/parame51" rel="nofollow">parame51</a>) you typically create 4 node-packages:</p> <ul><li>parameXYZ : your 3D part library</li> <li>parameXYZ-cli : a CLI to export your work from command-line</li> <li>parameXYZ-ui : the sveltekit project to visualize your work in a Web-UI (for github-page deployment)</li> <li>parameXYZ-uis : a small static web-server that exposes <em>parameXYZ-ui</em> (for offline deployment)</li></ul> <p>In <em>parameXYZ-ui</em> and <em>parameXYZ-cli</em> you define the list of designs you want to expose. Usually it corresponds to the list your 3D part library <em>parameXYZ</em> exports plus optionally ad-hoc external designs you want to expose as well in your UI-app or CLI-app.</p> <h4>Solution</h4> <p><em>Parametrix</em> offers the helper npm-packages <em>geomui</em> and <em>geomocli</em> for creating your associated UI-app and CLI-app. <em>create-parametrix</em> boilerplates your UI-app and CLI-app. You can customize them afterward.</p> <h4>Boilerplate</h4> <p>For starting a new <em>geometrix design library</em>, use the scaffolding tool <em>create-parametrix</em>:</p> <pre class="language-bash"><!></pre> <p>Alternatively, you can use <a href="https://github.com/charlyoleg2/parame51" rel="nofollow">parame51</a> as template. Or if you want to create several <em>geometrix design libraries</em> in your repo, use <a href="https://github.com/charlyoleg2/parame53" rel="nofollow">parame53</a> as template.</p> <h3 class="svelte-231qb5">Contour with arcs</h3> <ul><li><a href="https://github.com/charlyoleg2/parame52/blob/main/desi52/src/pointedCorners/myPartM.ts" rel="nofollow">myPartM source</a></li> <li><a href="https://charlyoleg2.github.io/parame52/desi52/myPartM" rel="nofollow">myPartM page</a></li></ul> <p><em>myPartM</em> illustrates how to define arcs. <em>Geometrix</em> offers three ways to define arcs.</p> <p>API:</p> <ul><li><a rel="external">point()</a></li> <li><a rel="external">.middlePoint()</a></li> <li><a rel="external">.translatePolar()</a></li> <li><a rel="external">.addPointA()</a></li> <li><a rel="external">.addSegArc()</a></li> <li><a rel="external">.addSegArc2()</a></li> <li><a rel="external">.addSegArc3()</a></li> <li><a rel="external">.closeSegArc()</a></li></ul> <h3 class="svelte-231qb5">Contour with arcs and modified corners</h3> <ul><li><a href="https://github.com/charlyoleg2/parame52/blob/main/desi52/src/modifiedCorners/myPartN.ts" rel="nofollow">myPartN source</a></li> <li><a href="https://charlyoleg2.github.io/parame52/desi52/myPartN" rel="nofollow">myPartN page</a></li></ul> <p><em>myPartN</em> illustrates a design with arcs and modified corners.</p> <p>API:</p> <ul><li><a rel="external">.addCornerPointed()</a></li> <li><a rel="external">.addCornerRounded()</a></li> <li><a rel="external">.addCornerWidened()</a></li> <li><a rel="external">.addCornerWideAcc()</a></li></ul> <h3 class="svelte-231qb5">Contour with double-arcs</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53/src/myGroup5/myPartO.ts" rel="nofollow">myPartO source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53/myPartO" rel="nofollow">myPartO page</a></li></ul> <p><em>myPartO</em> illustrates double-arcs. Use double-arcs where you want to ensure the continuity of the derivate (i.e. tangent).</p> <p>API:</p> <ul><li><a rel="external">point()</a></li> <li><a rel="external">ShapePoint</a></li> <li><a rel="external">.addPointA()</a></li> <li><a rel="external">.addSeg2Arcs()</a></li></ul> <h3 class="svelte-231qb5">Functions defining a Contour</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53/src/myGroup5/myPartP.ts" rel="nofollow">myPartP source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53/myPartP" rel="nofollow">myPartP page</a></li></ul> <p><em>myPartP</em> shows how to use a function for creating a contour.</p> <p>API:</p> <ul><li><a rel="external">tContour</a></li> <li><a rel="external">.translate()</a></li></ul> <h3 class="svelte-231qb5">Add points, lines, vectors and dynamics decorations</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53/src/myGroup6/myPartQ.ts" rel="nofollow">myPartQ source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53/myPartQ" rel="nofollow">myPartQ page</a></li></ul> <p><em>myPartQ</em> shows how to use the extra layers for second contours, dynamics contours, points, lines and vectors.</p> <ul><li><em>Second contours</em> are thought for counter parts that are drawn for simulation but are not exported in 3D scripts.</li> <li><em>Dynamics contours</em> are free contours that could be used to show relative speeds, displacement, etc</li> <li><em>Point</em>, <em>Line</em> and <em>Vector</em> are helpers that you can use to debug your geometry.</li></ul> <p>Notice that the color of a contour can be overwritten when it is instanciated with <em>contour(x, y, color?)</em>.</p> <p>API:</p> <ul><li><a rel="external">Contour()</a></li> <li><a rel="external">.addSecond()</a></li> <li><a rel="external">.addDynamics()</a></li> <li><a rel="external">Point()</a></li> <li><a rel="external">ShapePoint</a></li> <li><a rel="external">.addPoint()</a></li> <li><a rel="external">Line()</a></li> <li><a rel="external">.addLine()</a></li> <li><a rel="external">Vector()</a></li> <li><a rel="external">.addVector()</a></li></ul> <h3 class="svelte-231qb5">Just 2D drawings</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53/src/myGroup6/myPartR.ts" rel="nofollow">myPartR source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53/myPartR" rel="nofollow">myPartR page</a></li></ul> <p><em>myPartR</em> shows a serie of 2D designs without 3D volume. The property <em>vol</em> of the object <em>rGeome</em> of type <em>tGeom</em> has been commented out.</p> <p>API:</p> <ul><li><a rel="external">point()</a></li> <li><a rel="external">Point()</a></li> <li><a rel="external">.translate()</a></li> <li><a rel="external">.translatePolar()</a></li></ul> <h3 class="svelte-231qb5">A serie of blade profiles</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53b/src/myGroup7/myPartS.ts" rel="nofollow">myPartS source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53b/myPartS" rel="nofollow">myPartS page</a></li></ul> <p><em>myPartS</em> shows a serie of blade profiles. Wing is a complex shape that cannot be described with <em>Parametrix</em>. But a serie of 2D profiles can approximate the ideal shape description.</p> <p>API:</p> <ul><li><a rel="external">.rotate()</a></li> <li><a rel="external">.translate()</a></li> <li><a rel="external">.translatePolar()</a></li> <li><a rel="external">.rotate()</a></li> <li><a rel="external">tExtrude</a></li></ul> <h3 class="svelte-231qb5">Expose external design</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53b/src/myGroup7/myPartT.ts" rel="nofollow">myPartT source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53b/myPartA" rel="nofollow">myPartT page</a></li></ul> <p><em>myPartT</em> is a re-export and rename of <em>myPartA</em> of the library <em>desi51</em>.</p> <p>For this re-export, two modifications are required:</p> <ul><li><em>desi51</em> must be installed as dependency of <em>desi53b</em></li> <li>the svg files of <em>desi51</em> must be copied in the <em>pgdsvg</em> directory of <em>desi53b</em></li></ul> <p>API:</p> <ul><li><a rel="external">tPageDef</a></li> <li><a rel="external">tParamDef</a></li></ul> <h3 class="svelte-231qb5">Assembly using external design</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53b/src/myGroup8/myPartU.ts" rel="nofollow">myPartU source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53b/myPartU" rel="nofollow">myPartU page</a></li></ul> <p><em>myPartU</em> is an assembly of external design <em>myPartA</em> of the library <em>desi51</em>.</p> <p>As the module <em>myPartT</em> overwrites the <em>partName</em>, the new name <em>myPartT</em> must be used.</p> <p>API:</p> <ul><li><a rel="external">designParam()</a></li> <li><a rel="external">.getSuffix()</a></li> <li><a rel="external">.getPartNameSuffix()</a></li> <li><a rel="external">.getPartName()</a></li> <li><a rel="external">.setVal()</a></li> <li><a rel="external">checkGeom()</a></li> <li><a rel="external">prefixLog()</a></li> <li><a rel="external">.mergeFigure()</a></li></ul> <h3 class="svelte-231qb5">Transitive reuse of designs</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53b/src/myGroup8/myPartV.ts" rel="nofollow">myPartV source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53b/myPartV" rel="nofollow">myPartV page</a></li></ul> <p><em>myPartV</em> re-exports <em>myPartK</em>, which is itself an assembly of other designs.</p> <h3 class="svelte-231qb5">Computing the 3D-rotation and 3D-translation of an extrusion with transform3d</h3> <ul><li><a href="https://github.com/charlyoleg2/parame53/blob/main/pkg/desi53b/src/myGroup8/myPartW.ts" rel="nofollow">myPartW source</a></li> <li><a href="https://charlyoleg2.github.io/parame53/desi53b/myPartW" rel="nofollow">myPartW page</a></li></ul> <p><em>myPartW</em> illustrates the usage of <em>transform3d</em> for computing the 3D-rotation and 3D-translation to apply to an extrusion sub-part. <em>transform3d</em> helps to combine a list of 3D-rotation and 3D-translation into a single 3D-rotation and a single 3D-translation.</p> <p><em>myPartW</em> also illustrates the usage of <em>ctrRectangle</em> and <em>ctrRectRot</em> for drawing rectangles.</p> <p>API:</p> <ul><li><a rel="external">transform3d()</a></li> <li><a rel="external">.addRotation()</a></li> <li><a rel="external">.addTranslation()</a></li> <li><a rel="external">.getRotation()</a></li> <li><a rel="external">.getTranslation()</a></li> <li><a rel="external">ctrRectangle()</a></li> <li><a rel="external">ctrRectRot()</a></li></ul>',1);function Cl(da,ua){const ga=nl(ua,["children","$$slots","$$events","$$legacy"]);hl(da,cl(()=>ga,()=>pa,{children:(fa,ul)=>{var Ye=dl(),o=tl(Ye),ya=e(o,!0);a(o);var i=r(o,20),Oe=e(i),va=e(Oe);a(Oe),a(i);var s=r(i,14),m=e(s),xa=e(m);a(m);var n=r(m,2),Pa=e(n);a(n);var c=r(n,2),_a=e(c);a(c);var Xe=r(c,2),ba=e(Xe);a(Xe),a(s);var h=r(s,16),p=e(h),wa=e(p);a(p);var Je=r(p,2),$a=e(Je);a(Je),a(h);var d=r(h,20),u=e(d),Ca=e(u);a(u);var g=r(u,2),Da=e(g);a(g);var f=r(g,2),Sa=e(f);a(f);var Ze=r(f,2),Aa=e(Ze);a(Ze),a(d);var y=r(d,16),v=e(y),ka=e(v);a(v);var x=r(v,2),Ia=e(x);a(x);var P=r(x,2),Ga=e(P);a(P);var Ke=r(P,2),Ra=e(Ke);a(Ke),a(y);var _=r(y,12),b=e(_),qa=e(b);a(b);var w=r(b,2),Fa=e(w);a(w);var $=r(w,2),Ta=e($);a($);var ze=r($,2),La=e(ze);a(ze),a(_);var C=r(_,12),Me=e(C),Ua=e(Me);a(Me),a(C);var D=r(C,16),S=e(D),Va=e(S);a(S);var A=r(S,2),Wa=e(A);a(A);var k=r(A,2),Ea=e(k);a(k);var He=r(k,2),Na=e(He);a(He),a(D);var I=r(D,12),G=e(I),Ba=e(G);a(G);var R=r(G,2),ja=e(R);a(R);var q=r(R,2),Ya=e(q);a(q);var F=r(q,2),Oa=e(F);a(F);var T=r(F,2),Xa=e(T);a(T);var L=r(T,2),Ja=e(L);a(L);var Qe=r(L,2),Za=e(Qe);a(Qe),a(I);var U=r(I,12),V=e(U),Ka=e(V);a(V);var W=r(V,2),za=e(W);a(W);var E=r(W,2),Ma=e(E);a(E);var N=r(E,2),Ha=e(N);a(N);var B=r(N,2),Qa=e(B);a(B);var j=r(B,2),er=e(j);a(j);var ea=r(j,2),ar=e(ea);a(ea),a(U);var Y=r(U,24),rr=e(Y);ml(rr,()=>`<code class="language-bash"><span class="token function">npm</span> create parametrix@latest
<span class="token comment"># Or</span>
<span class="token function">npm</span> create parametrix@latest Sam08</code>`),a(Y);var O=r(Y,12),X=e(O),lr=e(X);a(X);var J=r(X,2),tr=e(J);a(J);var Z=r(J,2),or=e(Z);a(Z);var K=r(Z,2),ir=e(K);a(K);var z=r(K,2),sr=e(z);a(z);var M=r(z,2),mr=e(M);a(M);var H=r(M,2),nr=e(H);a(H);var aa=r(H,2),cr=e(aa);a(aa),a(O);var Q=r(O,10),ee=e(Q),hr=e(ee);a(ee);var ae=r(ee,2),pr=e(ae);a(ae);var re=r(ae,2),dr=e(re);a(re);var ra=r(re,2),ur=e(ra);a(ra),a(Q);var le=r(Q,10),te=e(le),gr=e(te);a(te);var oe=r(te,2),fr=e(oe);a(oe);var ie=r(oe,2),yr=e(ie);a(ie);var la=r(ie,2),vr=e(la);a(la),a(le);var se=r(le,10),me=e(se),xr=e(me);a(me);var ta=r(me,2),Pr=e(ta);a(ta),a(se);var ne=r(se,14),ce=e(ne),_r=e(ce);a(ce);var he=r(ce,2),br=e(he);a(he);var pe=r(he,2),wr=e(pe);a(pe);var de=r(pe,2),$r=e(de);a(de);var ue=r(de,2),Cr=e(ue);a(ue);var ge=r(ue,2),Dr=e(ge);a(ge);var fe=r(ge,2),Sr=e(fe);a(fe);var ye=r(fe,2),Ar=e(ye);a(ye);var ve=r(ye,2),kr=e(ve);a(ve);var oa=r(ve,2),Ir=e(oa);a(oa),a(ne);var xe=r(ne,10),Pe=e(xe),Gr=e(Pe);a(Pe);var _e=r(Pe,2),Rr=e(_e);a(_e);var be=r(_e,2),qr=e(be);a(be);var ia=r(be,2),Fr=e(ia);a(ia),a(xe);var we=r(xe,10),$e=e(we),Tr=e($e);a($e);var Ce=r($e,2),Lr=e(Ce);a(Ce);var De=r(Ce,2),Ur=e(De);a(De);var Se=r(De,2),Vr=e(Se);a(Se);var sa=r(Se,2),Wr=e(sa);a(sa),a(we);var Ae=r(we,14),ke=e(Ae),Er=e(ke);a(ke);var ma=r(ke,2),Nr=e(ma);a(ma),a(Ae);var Ie=r(Ae,12),Ge=e(Ie),Br=e(Ge);a(Ge);var Re=r(Ge,2),jr=e(Re);a(Re);var qe=r(Re,2),Yr=e(qe);a(qe);var Fe=r(qe,2),Or=e(Fe);a(Fe);var Te=r(Fe,2),Xr=e(Te);a(Te);var Le=r(Te,2),Jr=e(Le);a(Le);var Ue=r(Le,2),Zr=e(Ue);a(Ue);var na=r(Ue,2),Kr=e(na);a(na),a(Ie);var ca=r(Ie,18),Ve=e(ca),zr=e(Ve);a(Ve);var We=r(Ve,2),Mr=e(We);a(We);var Ee=r(We,2),Hr=e(Ee);a(Ee);var Ne=r(Ee,2),Qr=e(Ne);a(Ne);var Be=r(Ne,2),el=e(Be);a(Be);var je=r(Be,2),al=e(je);a(je);var ha=r(je,2),rl=e(ha);a(ha),a(ca),ol(()=>{sl(ya,pl),l(va,"href",`${t??""}/docs/apidoc/interfaces/geometrix.tPageDef.html`),l(xa,"href",`${t??""}/docs/apidoc/functions/geometrix.pNumber.html`),l(Pa,"href",`${t??""}/docs/apidoc/functions/geometrix.pDropdown.html`),l(_a,"href",`${t??""}/docs/apidoc/functions/geometrix.pCheckbox.html`),l(ba,"href",`${t??""}/docs/apidoc/functions/geometrix.pSectionSeparator.html`),l(wa,"href",`${t??""}/docs/apidoc/enums/geometrix.EExtrude.html`),l($a,"href",`${t??""}/docs/apidoc/enums/geometrix.EBVolume.html`),l(Ca,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeA`),l(Da,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeR`),l(Sa,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeAP`),l(Aa,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegStrokeRP`),l(ka,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerPointed`),l(Ia,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerRounded`),l(Ga,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerWidened`),l(Ra,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerWideAcc`),l(qa,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#rotate`),l(Fa,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#scale`),l(Ta,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#translate`),l(La,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#translatePolar`),l(Ua,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addPartial`),l(Va,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#rotate`),l(Wa,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#translate`),l(Ea,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#translatePolar`),l(Na,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#mergeFigure`),l(Ba,"href",`${t??""}/docs/apidoc/functions/geometrix.designParam-1.html`),l(ja,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#setVal`),l(Ya,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getParamVal`),l(Oa,"href",`${t??""}/docs/apidoc/functions/geometrix.checkGeom.html`),l(Xa,"href",`${t??""}/docs/apidoc/functions/geometrix.prefixLog.html`),l(Ja,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#mergeFigure`),l(Za,"href",`${t??""}/docs/apidoc/types/geometrix.tSubDesign.html`),l(Ka,"href",`${t??""}/docs/apidoc/interfaces/geometrix.tInherit.html`),l(za,"href",`${t??""}/docs/apidoc/types/geometrix.tSubDesign.html`),l(Ma,"href",`${t??""}/docs/apidoc/functions/geometrix.designParam-1.html`),l(Ha,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getSuffix`),l(Qa,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getPartNameSuffix`),l(er,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getPartName`),l(ar,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getDesignParamList`),l(lr,"href",`${t??""}/docs/apidoc/functions/geometrix.point-1.html`),l(tr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#middlePoint`),l(or,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#translatePolar`),l(ir,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addPointA`),l(sr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegArc`),l(mr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegArc2`),l(nr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSegArc3`),l(cr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#closeSegArc`),l(hr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerPointed`),l(pr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerRounded`),l(dr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerWidened`),l(ur,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addCornerWideAcc`),l(gr,"href",`${t??""}/docs/apidoc/functions/geometrix.point-1.html`),l(fr,"href",`${t??""}/docs/apidoc/enums/geometrix.ShapePoint.html`),l(yr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addPointA`),l(vr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#addSeg2Arcs`),l(xr,"href",`${t??""}/docs/apidoc/types/geometrix.tContour.html`),l(Pr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#translate`),l(_r,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#constructor`),l(br,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#addSecond`),l(wr,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#addDynamics`),l($r,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html`),l(Cr,"href",`${t??""}/docs/apidoc/enums/geometrix.ShapePoint.html`),l(Dr,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#addPoint`),l(Sr,"href",`${t??""}/docs/apidoc/classes/geometrix.Line.html`),l(Ar,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#addLine`),l(kr,"href",`${t??""}/docs/apidoc/classes/geometrix.Vector.html`),l(Ir,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#addVector`),l(Gr,"href",`${t??""}/docs/apidoc/functions/geometrix.point-1.html`),l(Rr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html`),l(qr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#translate`),l(Fr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#translatePolar`),l(Tr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#rotate`),l(Lr,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#translate`),l(Ur,"href",`${t??""}/docs/apidoc/classes/geometrix.Point.html#translatePolar`),l(Vr,"href",`${t??""}/docs/apidoc/classes/geometrix.Contour.html#rotate`),l(Wr,"href",`${t??""}/docs/apidoc/interfaces/geometrix.tExtrude.html`),l(Er,"href",`${t??""}/docs/apidoc/interfaces/geometrix.tPageDef.html`),l(Nr,"href",`${t??""}/docs/apidoc/interfaces/geometrix.tParamDef.html`),l(Br,"href",`${t??""}/docs/apidoc/functions/geometrix.designParam-1.html`),l(jr,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getSuffix`),l(Yr,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getPartNameSuffix`),l(Or,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#getPartName`),l(Xr,"href",`${t??""}/docs/apidoc/classes/geometrix.DesignParam.html#setVal`),l(Jr,"href",`${t??""}/docs/apidoc/functions/geometrix.checkGeom.html`),l(Zr,"href",`${t??""}/docs/apidoc/functions/geometrix.prefixLog.html`),l(Kr,"href",`${t??""}/docs/apidoc/classes/geometrix.Figure.html#mergeFigure`),l(zr,"href",`${t??""}/docs/apidoc/functions/geometrix.transform3d-1.html`),l(Mr,"href",`${t??""}/docs/apidoc/classes/geometrix.Transform3d.html#addRotation`),l(Hr,"href",`${t??""}/docs/apidoc/classes/geometrix.Transform3d.html#addTranslation`),l(Qr,"href",`${t??""}/docs/apidoc/classes/geometrix.Transform3d.html#getRotation`),l(el,"href",`${t??""}/docs/apidoc/classes/geometrix.Transform3d.html#getTranslation`),l(al,"href",`${t??""}/docs/apidoc/functions/geometrix.ctrRectangle.html`),l(rl,"href",`${t??""}/docs/apidoc/functions/geometrix.ctrRectRot.html`)}),il(fa,Ye)},$$slots:{default:!0}}))}export{Cl as component};
